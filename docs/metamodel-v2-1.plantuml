@startuml
class Module
class Scope
class ModuleScope
class Unit
class Property
class Expression
class BlockScope
class Metadata

class Loop
class Conditional
class LogicalSequence
class Jump
class Declaration
class Assignment
class Lambda
class UnitCall

enum ModuleType {
    CLASS
    ENUM
    INTERFACE
    RECORD
}

enum ModifierType {
    PUBLIC
    PROTECTED
    PRIVATE
    STATIC
    FINAL
    OPEN
    SEALED
    ABSTRACT
}

Module : # packageName: String
Module : # filePath: String
Module : # fileName: String
Module : # imports: List<String>
Module *-- ModuleScope
Module *-- Metadata

Scope <|-- ModuleScope
Scope <|-- Unit
Scope <|-- Property
Scope <|-- BlockScope

ModuleScope : # id: String
ModuleScope : # extends: List<String>
ModuleScope : # implements: List<String>
ModuleScope : # members: List<Scope>
ModuleScope "1" *-- "*" ModifierType : modifiers >
ModuleScope *-- ModuleType : moduleType >

Unit : # id: String
Unit : # parameters: List<Property>
Unit : # modifiers: List<ModifierType>
Unit : # body: BlockScope
Unit : # metadata: Metadata

Property : # id: String
Property : # modifiers: List<ModifierType>
Property : # value: Expression
Property : # getter: Unit
Property : # setter: Unit

BlockScope "1" *-- "*" Expression : expressions >

Expression : # nestedScope: BlockScope
Expression : # metadata: Metadata

Expression <|-- Loop
Expression <|-- Conditional
Expression <|-- LogicalSequence
Expression <|-- Jump
Expression <|-- Declaration
Expression <|-- Assignment
Expression <|-- Lambda
Expression <|-- UnitCall
Expression <|-- Catch

Catch : # exception: Property

Loop : # evaluations: List<Expression>

Conditional : # condition: Expression
Conditional : # elseExpr: Expression

LogicalSequence : # operands: List<Expression>

Lambda : # parameters: List<Property>

UnitCall : # reference: String
UnitCall : # arguments: List<Expression>

Declaration : # value: Scope

Assignment : # reference: Expression

Unit *-- Metadata
Property *-- Metadata
Expression *-- Metadata

Metadata : # startLine
Metadata : # endLine
Metadata : # startOffset
Metadata : # endOffset

@enduml