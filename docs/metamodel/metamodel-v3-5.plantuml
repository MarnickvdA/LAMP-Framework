@startuml
class ModuleRoot
abstract class SourceElement
class Module
class Unit
class Property
class Expression
abstract class Declarable

class Loop
class Conditional
class LogicalSequence
class Jump
class Lambda

abstract class Access
class PropertyAccess
class UnitCall
class Assignment

enum ModuleType {
    CLASS
    ENUM
    INTERFACE
    RECORD
}

enum ModifierType {
    PUBLIC
    PROTECTED
    PRIVATE
    STATIC
    FINAL
    ABSTRACT
    OVERRIDE
}

ModuleRoot : # filePath: String
ModuleRoot : # fileName: String
ModuleRoot : # componentName: String?
ModuleRoot : # imports: List<String>
ModuleRoot *-- Module: # module >

SourceElement : # metadata: Metadata

SourceElement <|-- Declarable
SourceElement <|-- Expression

Declarable : # id: String
Declarable : # returnType : String?
Declarable *-- "*" ModifierType : modifiers >

Declarable <|-- Module
Declarable <|-- Unit
Declarable <|-- Property

Module : # extends: List<String>
Module : # implements: List<String>
Module : # members: List<Declarable>
Module *-- ModuleType : moduleType >

Unit : # parameters: List<Property>
Unit : # body: Expression?

Property : # initializer: Expression?

Expression : # context: String?
Expression : # innerScope: List<SourceElement>

Expression <|-- Loop
Expression <|-- Conditional
Expression <|-- LogicalSequence
Expression <|-- Jump
Expression <|-- Lambda
Expression <|-- Catch
Expression <|-- Access
Expression <|-- Switch
Expression <|-- SwitchCase

Access : # declarableId: String

Access <|-- UnitCall
Access <|-- ReferenceAccess
Access <|-- Assignment

UnitCall : # arguments: List<Expression>

Assignment : # value: Expression

Catch : # exception: Property

Loop : # evaluations: List<Expression>

Conditional : # ifExpr: Expression
Conditional : # elseIfExpr: List<Expression>
Conditional : # elseExpr: Expression

LogicalSequence : # operands: List<Expression>

Jump : # label: String?

Lambda : # unit: Unit

Switch : # subject: Expression?
Switch *-- "*" SwitchCase : cases >

SwitchCase : # pattern: Expression?

@enduml