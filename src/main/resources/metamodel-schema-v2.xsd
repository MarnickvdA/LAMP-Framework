<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="https://www.utwente.nl/v2"
           xmlns="https://www.utwente.nl/v2"
           elementFormDefault="qualified">

    <xs:element name="Module">
        <xs:complexType>
            <xs:sequence>
                <xs:element minOccurs="0" name="Imports" type="ModuleReferenceList"/>
                <xs:element name="ModuleScope" type="ModuleScope"/>
            </xs:sequence>
            <xs:attribute name="packageName" type="xs:string"/>
            <xs:attribute name="filePath" type="xs:anyURI"/>
            <xs:attribute name="fileName" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="Metadata">
        <xs:attribute name="startLine" type="xs:positiveInteger"/>
        <xs:attribute name="endLine" type="xs:positiveInteger"/>
        <xs:attribute name="startOffset" type="xs:nonNegativeInteger"/>
        <xs:attribute name="endOffset" type="xs:nonNegativeInteger"/>
    </xs:complexType>

    <xs:complexType name="Scope">
    </xs:complexType>

    <xs:complexType name="ModuleScope">
        <xs:complexContent>
            <xs:extension base="Scope">
                <xs:sequence>
                    <xs:element minOccurs="0" name="Modifiers" type="ModifierList"/>
                    <xs:element minOccurs="0" name="Extends" type="ModuleReferenceList"/>
                    <xs:element minOccurs="0" name="Implements" type="ModuleReferenceList"/>
                    <xs:element minOccurs="0" name="Members" type="Scope"/>
                </xs:sequence>
                <xs:attribute name="moduleType" type="moduleType"/>
                <xs:attribute name="id" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Unit">
        <xs:complexContent>
            <xs:extension base="Scope">
                <xs:sequence>
                    <xs:element name="Parameters" type="ParameterList"/>
                    <xs:element name="Modifiers" type="ModifierList"/>
                    <xs:element name="Body" type="ExpressionScope"/>
                </xs:sequence>
                <!-- TODO Include parameters in ID to handle function overloads. -->
                <xs:attribute name="id" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="UnitBody">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Expression" type="Expression"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Property">
        <xs:complexContent>
            <xs:extension base="Scope">
                <xs:sequence>
                    <xs:element name="Modifiers" type="ModifierList"/>
                    <xs:element minOccurs="0" name="Getter" type="Unit"/>
                    <xs:element minOccurs="0" name="Setter" type="Unit"/>
                </xs:sequence>
                <!-- TODO add a check if property is defined? -->
                <xs:attribute name="id" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->

    <xs:complexType name="Expression">
        <xs:sequence>
            <!-- Simple expressions do not have an inner scope -->
            <xs:element minOccurs="0" name="Scope" type="ExpressionScope"/>

            <!-- Metadata about the source location of the expression. -->
            <xs:element name="Metadata" type="Metadata"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ExpressionScope">
        <xs:complexContent>
            <xs:extension base="Scope">
                <!-- Functions as a block of expressions -->
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="Expression" type="Expression"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Loop">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence maxOccurs="unbounded">
                    <xs:element name="Evaluation" type="Expression"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Conditional">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:element name="IfExpr" type="Expression"/>
                    <xs:element name="ElseExpr"
                                type="Expression"/> <!-- Elseif will be nested within ElseExpr as another conditional -->
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="LogicalSequence">
        <xs:complexContent>
            <xs:extension base="Expression">
                <!-- Sequence is Expr1 && ... && ExprN, or Expr1 || ... || ExprN. Where && or || chains are seen as 1 Expression -->
                <xs:sequence minOccurs="2" maxOccurs="unbounded">
                    <xs:element name="Operand" type="Expression"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Jump">
        <xs:complexContent>
            <xs:extension base="Expression"/>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Declaration">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:attribute name="id" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Assignment on an existing object in code, seen as a mutation -->
    <xs:complexType name="Assignment">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:attribute name="reference" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Lambda">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:element name="Arguments" type="ArgumentList"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="UnitCall">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:element name="Arguments" type="ArgumentList"/>
                </xs:sequence>
                <xs:attribute name="reference" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->

    <xs:complexType name="ModuleReferenceList">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="ModuleReference" type="xs:string"/> <!-- e.g. nl.utwente.student.AClass -->
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ParameterList">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Parameter" type="Property"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ModifierList">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Modifier" type="modifierType"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ArgumentList">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="Argument" type="Expression"/>
        </xs:sequence>
    </xs:complexType>

    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->

    <xs:simpleType name="moduleType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="class"/>
            <xs:enumeration value="enum"/>
            <xs:enumeration value="interface"/>
            <xs:enumeration value="record"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="modifierType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="public"/>
            <xs:enumeration value="protected"/>
            <xs:enumeration value="private"/>
            <xs:enumeration value="static"/>
            <xs:enumeration value="final"/>
            <xs:enumeration value="open"/>
            <xs:enumeration value="sealed"/>
            <xs:enumeration value="abstract"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>