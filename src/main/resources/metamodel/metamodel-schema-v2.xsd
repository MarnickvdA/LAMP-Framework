<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="https://www.utwente.nl/v2"
           xmlns="https://www.utwente.nl/v2"
           elementFormDefault="qualified">

    <xs:element name="Module">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="Metadata" type="Metadata"/>
                <xs:sequence id="imports" minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="Import" type="xs:string"/> <!-- e.g. nl.utwente.student.AClass -->
                </xs:sequence>
                <xs:element name="ModuleScope" type="ModuleScope"/>
            </xs:sequence>
            <xs:attribute name="packageName" type="xs:string"/>
            <xs:attribute name="filePath" type="xs:anyURI"/>
            <xs:attribute name="fileName" type="xs:string"/>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="Metadata">
        <xs:attribute name="startLine" type="xs:positiveInteger"/>
        <xs:attribute name="endLine" type="xs:positiveInteger"/>
        <xs:attribute name="startOffset" type="xs:nonNegativeInteger"/>
        <xs:attribute name="endOffset" type="xs:nonNegativeInteger"/>
    </xs:complexType>

    <xs:complexType name="Scope">
    </xs:complexType>

    <xs:complexType name="ModuleScope">
        <xs:complexContent>
            <xs:extension base="Scope">
                <xs:sequence>
                    <xs:element name="Identifier" type="Identifier"/>
                    <xs:sequence id="moduleModifiers" minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="Modifier" type="modifierType"/>
                    </xs:sequence>
                    <xs:sequence id="extends" minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="Extends" type="xs:string"/> <!-- e.g. nl.utwente.student.AClass -->
                    </xs:sequence>
                    <xs:sequence id="implements" minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="Implements" type="xs:string"/> <!-- e.g. nl.utwente.student.AClass -->
                    </xs:sequence>
                    <xs:sequence id="members" minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="Member" type="Scope"/>
                    </xs:sequence>
                </xs:sequence>
                <xs:attribute name="moduleType" type="moduleType"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Unit">
        <xs:complexContent>
            <xs:extension base="Scope">
                <xs:sequence>
                    <xs:element name="Metadata" type="Metadata"/>
                    <xs:element name="Identifier" type="Identifier"/>
                    <xs:sequence id="unitModifiers" minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="Modifier" type="modifierType"/>
                    </xs:sequence>
                    <xs:sequence id="parameters" minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="Parameter" type="Property"/>
                    </xs:sequence>
                    <xs:element minOccurs="0" name="Body" type="BlockScope"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Property">
        <xs:complexContent>
            <xs:extension base="Scope">
                <xs:sequence>
                    <xs:element name="Metadata" type="Metadata"/>
                    <xs:element name="Identifier" type="Identifier"/>
                    <xs:sequence id="modifiers" minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="Modifier" type="modifierType"/>
                    </xs:sequence>
                    <xs:element minOccurs="0" name="Value" type="Expression"/>
                    <xs:element minOccurs="0" name="Getter" type="Unit"/>
                    <xs:element minOccurs="0" name="Setter" type="Unit"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->

    <xs:complexType name="Expression">
        <xs:sequence>
            <!-- Metadata about the source location of the expression. -->
            <xs:element name="Metadata" type="Metadata"/>

            <!-- Simple expressions do not have an inner scope -->
            <xs:element minOccurs="0" name="NestedScope" type="BlockScope"/>
        </xs:sequence>

        <!-- Information about the origin of this expression -->
        <xs:attribute name="context" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="BlockScope">
        <xs:complexContent>
            <xs:extension base="Scope">
                <!-- Functions as a block of expressions -->
                <xs:sequence minOccurs="0" maxOccurs="unbounded">
                    <xs:element name="Expression" type="Expression"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Loop">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence maxOccurs="unbounded">
                    <xs:element name="Evaluation" type="Expression"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Catch">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:element name="Exception" type="Property"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="Conditional">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:element name="IfExpr" type="Expression"/>
                    <xs:sequence minOccurs="0" maxOccurs="unbounded">
                        <xs:element name="ElseIfExpr" type="Expression"/>
                    </xs:sequence>
                    <xs:element minOccurs="0" name="ElseExpr" type="Expression"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="LogicalSequence">
        <xs:complexContent>
            <xs:extension base="Expression">
                <!-- Sequence is Expr1 && ... && ExprN, or Expr1 || ... || ExprN. Where && or || chains are seen as 1 Expression -->
                <xs:sequence minOccurs="2" maxOccurs="unbounded">
                    <xs:element name="Operand" type="Expression"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Jump">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:attribute name="label" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Declaration">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:element name="Value" type="Scope"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Assignment on an existing object in code, seen as a mutation -->
    <xs:complexType name="Assignment">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:element name="Reference" type="Identifier"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Lambda">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:sequence minOccurs="0" maxOccurs="unbounded" id="lambdaParams">
                        <xs:element name="Parameter" type="Property"/>
                    </xs:sequence>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="UnitCall">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:sequence>
                    <xs:sequence minOccurs="0" maxOccurs="unbounded" id="unitCallArgs">
                        <xs:element name="Argument" type="Expression"/>
                    </xs:sequence>
                    <xs:element name="Reference" type="Identifier"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Identifier">
        <xs:complexContent>
            <xs:extension base="Expression">
                <xs:attribute name="value" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->
    <!--    -->

    <xs:simpleType name="moduleType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="class"/>
            <xs:enumeration value="enum"/>
            <xs:enumeration value="interface"/>
            <xs:enumeration value="record"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="modifierType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="public"/>
            <xs:enumeration value="protected"/>
            <xs:enumeration value="private"/>
            <xs:enumeration value="static"/>
            <xs:enumeration value="final"/>
            <xs:enumeration value="open"/>
            <xs:enumeration value="sealed"/>
            <xs:enumeration value="abstract"/>
            <xs:enumeration value="default"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>